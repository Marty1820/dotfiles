;; CAL VARS
(defpoll calendar_day :interval "10h" "date '+%d'")
(defpoll calendar_year :interval "10h" "date '+%Y'")
(defpoll today :interval "12h" "date '+%a, %d %B'")
(defpoll time :interval "5s" "date '+%H:%M'")

;; ENV VARS
(defpoll wm :interval "12h" "echo $XDG_CURRENT_DESKTOP")
(defpoll uptime :interval "1m" "uptime -p | sed -e 's/up //;s/ hours,/h/;s/ minutes/m/'")
(defpoll packages :interval "15m" "pacman -Q | wc -l")

;; WEATHER VARS
(defpoll weather_temp :interval "10m" :initial "0"
  "$HOME/.config/scripts/weather.sh --temp")
(defpoll weather_desc :interval "10m"
  "$HOME/.config/scripts/weather.sh --stat")
(defpoll weather_feels_like :interval "10m"
  "$HOME/.config/scripts/weather.sh --feel")
(defpoll weather_humidity :interval "10m"
  "$HOME/.config/scripts/weather.sh --humid")
(defpoll weather_icon :interval "10m"
  "$HOME/.config/scripts/weather.sh --icon")
(defpoll weather_wind :interval "10m"
  "$HOME/.config/scripts/weather.sh --wind")
(defpoll weather_color :interval "10m"
  "$HOME/.config/scripts/weather.sh --hex")

;; VOLUME VARS
(defpoll volume :interval "1s" "pamixer --get-volume")
(defpoll vol_col :interval "1s" "scripts/volume --COL")
(defpoll vol_icon :interval "1s" "scripts/volume --ICON")
(defvar vol_mute "pamixer -t")

;; NETWORK VARS
(defpoll IP_ADDR :interval "1h" "ip -br address | grep UP | awk '{ print $3 }'")

;; SYSTEM VARS
(defpoll memory :interval "15s"
  "printf \"%.0f\\n\" $(/usr/bin/free -m | grep Mem | awk '{print ($3/$2)*100}')")
(defpoll cpu :interval "17s"
  "echo 45")
(defpoll temp :initial 30 :interval "10s" `sensors | rg temp1 | rg -o "\\d+.\\d+" | head -1`)

;; Widgets
(defwidget dash []
  (box :class "dash" :orientation "h")
)

(defwidget cal[]
  (box :class "cal-container" :orientation "v" :space-evenly "false" :halign "center"
    (box  :class "cal-box" :orientation "v" :space-evenly "false"
      (label :class "clock" :text time)
      (label :class "date" :text today)
    )
    (box :class "cal-window" :orientation "h"
      (calendar
        :class "day-names" :day calendar_day
        :class "month-year" :year calendar_year)
    )
  )
)

(defwidget info []
  (box :class "info-box-outer" :orientation "h" :space-evenly false :halign "center"
    (box :class "info-box-top" :orientation "v" :space-evenly false
      (box :class "info-box-inner" :orientation "h" :space-evenly false
        (box :class "info-box-left" :orientation "v" :space-evenly false
          (label :class "info-icon" :text " :")
          (label :class "info-icon" :text "󰥔 :")
          (label :class "info-icon" :text "󰏖 :")
        )
        (box :class "info-box-right" :orientation "v" :space-evenly false
          (label :class "info-text" :halign "start" :text "${wm}")
          (label :class "info-text" :halign "start" :text "${uptime}")
          (label :class "info-text" :halign "start" :text "${packages}")
        )
      )
    )
  )
)

(defwidget apps []
  (box :class "app-container" :orientation "v" :space-evenly "true" :hexpand "false" :vexpand "false" :halign "center"
    (label :text "Apps" :class "app-label")
    (box :class "app-box" :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 10
      (button :class "app-firefox"
        :onclick "firefox 2> /dev/null" "󰈹")
      (button :class "app-files"
        :onclick "pcmanfm 2> /dev/null" "")
      (button :class "app-code"
        :onclick "vscodium 2> /dev/null" "󰨞")
    )
  )
)

(defwidget weather []
  (box :class "weather-container" :orientation "v" :space-evenly "false" :halign "center"
    (box :class "weather-box" :orientation "h" :space-evenly "false" :halign "center" :spacing 10
      (label :class "weather-icon" :style "color: ${weather_color};" :text {weather_icon != "" ? "${weather_icon}" : "󰼯"})
      (label :class "weather-temp" :text "${weather_temp}F")
    )
    (box :class "weather-window" :orientation "v" :space-evenly "false" :spacing 2
      (label :class "weather-desc" :text "${weather_desc}" :limit-width 32 :wrap "true")
      (label :class "weather-feel" :text "Feels Like: ${weather_feels_like}F")
      (label :class "weather-feel" :halign "center" :text "󰖝 ${weather_wind} mph")
      (label :class "weather-feel" :halign "center" :text "  ${weather_humidity}󰏰")
    )
  )
)

(defwidget volume []
  (box :class "metric" :orientation "h" :space-evenly "false" :halign "center"
    (button :onclick vol_mute
      (box :class "vol-label" :orientation "h" :style "color: ${vol_col};" vol_icon)
    )
    (scale :min 0 :max 101 :value volume :orientation "h" :onchange "~/.config/eww/scripts/vol-set {}")
    (label :class "vol-text" :text "${volume}%")
  )
)

(defwidget network []
  (box :class "network-label" :orientation "h" :space-evenly "false" :spacing 10 :halign "center"
    (label :text "${IP_ADDR}")
  )
)

(defwidget network-up []
  (box :class "network" :orientation "h" :space-evenly "false" :spacing 10 :halign "center"
    (box :orientation "h" :class "network-box"
      (label :text "󰸇" :class "network-up")
    )
    (box :orientation "h" :width 130
      (graph  :class "network-graph-up"
        :thickness 2
        :value {round(EWW_NET.wlan0.NET_UP / 1024 ,1)}
        :time-range "2m"
        :min 0
        :max 101
        :dynamic "true"
        :line-style "round"
      )
    )
  )
)
(defwidget network-down []
  (box :class "network" :orientation "h" :space-evenly "false" :spacing 10 :halign "center"
    (box :orientation "h" :class "network-box"
      (label :text "󰮏" :width 10 :class "network-down")
    )
    (box :orientation "h" :width 130
      (graph  :class "network-graph-down"
        :thickness 2
        :value {round(EWW_NET.wlan0.NET_DOWN / 1024 ,1)}
        :time-range "2m"
        :min 0
        :max 101
        :dynamic "true"
        :line-style "round"
      )
    )
  )
)

(defwidget system []
  (box :class "sys_win" :orientation "h" :space-evenly "true" :hexpand "false" :vexpand "false"
    (box :class "sys_cpu_box" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false"
      (circular-progress :value cpu :class "sys_cpu" :thickness 8 :start-at 75
        (label :text "󰻠" :class "sys_icon_cpu" :limit-width 4 :wrap "false")
      )
      (label :class "cpu_perc" :halign "center" :text "${cpu}%")
    )
    (box :class "sys_mem_box" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false"
      (circular-progress :value memory :class "sys_mem" :thickness 8 :start-at 75
        (label :text "󰘚" :class "sys_icon_mem" :limit-width 4 :wrap false :angle 0.0)
      )
      (label :class "mem_perc" :halign "center" :text "${memory}%")
    )
  )
)

(defwidget functions []
  (box :class "function-container" :orientation "v" :space-evenly "true" :hexpand "false" :vexpand "false" :halign "center"
    (label :text "Functions" :class "function-label")
    (box :class "function-box" :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 10
      (button :class "placeholder"
        (label :text "" :class "placeholder"))
    )
  )
)

;; Closer
(defwidget closer [window]
  (eventbox
    :onclick "eww close ${window} && eww close ${window}-closer"))

(defwindow sidebar-closer
  :monitor 0
  :focusable "false"
  :stacking "fg"
  :geometry (geometry
    :width "100%"
    :height "100%")
  (closer
    :window "sidebar"))

;; Window setup
(defwidget right []
  (box :class "right" :orientation "v" :space-evenly "false"
    (cal)
    (dash)
    (info)
    (dash)
    (apps)
    (dash)
    (weather)
    (dash)
    (volume)
    (dash)
    (network)
    (network-up)
    (network-down)
    (dash)
    (system)
    (dash)
    (functions)
  )
)

(defwindow sidebar
  :monitor 0
  :wm-ignore "true"
  :windowtype "dialog"
  :exclusive "false"
  :focusable "false"
  :stacking "overlay"
  :geometry (geometry
    :x "0px"
    :y "0px"
    :width "140px"
    :anchor "right top")
  (box :class "main-container"
    (right)
  )
)
