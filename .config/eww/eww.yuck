;;███╗░░░███╗░█████╗░██████╗░████████╗██╗░░░██╗
;;████╗░████║██╔══██╗██╔══██╗╚══██╔══╝╚██╗░██╔╝
;;██╔████╔██║███████║██████╔╝░░░██║░░░░╚████╔╝░
;;██║╚██╔╝██║██╔══██║██╔══██╗░░░██║░░░░░╚██╔╝░░
;;██║░╚═╝░██║██║░░██║██║░░██║░░░██║░░░░░░██║░░░
;;╚═╝░░░░░╚═╝╚═╝░░╚═╝╚═╝░░╚═╝░░░╚═╝░░░░░░╚═╝░░░

;; ** Variables **

(defvar EWW "/usr/bin/eww -c $HOME/.config/eww")

;; Workspace vars
(deflisten workspace :initial "" "scripts/workspaces")

;; Time/Date vars
(defvar date_rev false)
(defpoll TIME :interval "10s" "date +\"%I:%M %p\"")
(defpoll DATE :interval "1h" "date +\"%A, %b %d\"")
(defpoll year :interval "24h" "date +%Y")
(defpoll month :interval "24h" "date +%B")
(defpoll hour :interval "1m" "date +%H")
(defpoll minute :interval "1m" "date +%M")
(defpoll datemonth :interval "24h" "date '+%A, %d %B'")
(defpoll day :interval "2h" "date '+%d'")

;; Weather vars
;; need to run "weather --getdata" to update cache
(defvar wthr_rev false)
(defpoll WTHR_ICON :interval "10m" "scripts/weather --icon")
(defpoll WTHR_TEMP :interval "10m" "scripts/weather --temp")
(defpoll WTHR_HEX :interval "10m" "scripts/weather --hex")
(defpoll WTHR_STAT :interval "10m" "scripts/weather --stat")
(defpoll WTHR_LOC :interval "10m" "scripts/weather --city")
(defpoll WTHR_FTEMP :interval "10m" "scripts/weather --feel")

;; Network
(defvar ip_rev false)
(defvar network_cmd "nm-connection-editor &")
(defpoll WLAN_COL :interval "10s" "scripts/wifi --COL")
(defpoll WLAN_ICON :interval "10s" "scripts/wifi --ICON")
(defpoll WLAN_ESSID :interval "1m" "scripts/wifi --ESSID")
(defpoll WLAN_SPEED :interval "30s" "if [ -z $(awk 'NR==3 {print $3}' /proc/net/wireless) ]; then echo 0; else awk 'NR==3 {print $3}' /proc/net/wireless; fi")
;; VPN
(defpoll VPN_ICON :interval "1m" "scripts/vpn")

;; Volume vars
(defvar VOL_MUTE "pamixer -t")
(defpoll VOL_COL :interval "1s" "scripts/volume --COL")
(defpoll VOL_ICON :interval "1s" "scripts/volume --ICON")
(defpoll VOLUME :interval "1s" "pamixer --get-volume")

;; Brightness vars
(defpoll BRIT_PER :interval "3s" "xbacklight -get")

;; Battery vars
(defpoll BAT_ICON :interval "15s" "scripts/battery --ICON")
(defpoll BAT_COL :interval "15s" "scripts/battery --COL")

;; ** Widgets **

(defwidget sep []
  (box :class "separator"
    (label :text "|")))

(defwidget workspaces []
  (box :class "dockbox"
    (literal :content workspace)))

;; clock
(defwidget clock []
  (eventbox :onhover "${EWW} update date_rev=true"
      :onhoverlost "${EWW} update date_rev=false"
      :onclick "${EWW} open --toggle calbox && ${EWW} open calbox-closer"
		(box :class "clockbox" :orientation "v" :spacing 0 :valign "center" :halign "start" :space-evenly "false" :vexpand "false" :hexpand "false"
			(label :class "time" :halign "start" :wrap "true" :limit-width 25 :text TIME)
      (revealer :transition "slideup"
          :reveal date_rev
          :duration "350ms"
          (label :class "date" :halign "start" :wrap "true" :limit-width 25 :text DATE)))))

;; weather
(defwidget weather [] 
  (eventbox :onhover "${EWW} update wthr_rev=true"
      :onhoverlost "${EWW} update wthr_rev=false"
      :onclick "${EWW} open --toggle calbox && ${EWW} open calbox-closer"
		(box :class "weatherbox" :orientation "h" :spacing 0 :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false"
  		(label :class "weathericon" :style "color: ${WTHR_HEX};" :text WTHR_ICON)
			(label :class "weathertemp" :text WTHR_TEMP)
      (revealer :transition "slideright"
          :reveal wthr_rev
          :duration "350ms"
          (label :class "weatherstat" :halign "start" :wrap "true" :limit-width 25 :text WTHR_STAT)))))

;; wifi
(defwidget wifi []
  (box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
    (box :style "color: ${WLAN_COL};" WLAN_ICON)
    (label :class "infotext" :halign "start" :text WLAN_ESSID)))

;; volume
(defwidget volume []
  (box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
    (box :style "color: ${VOL_COL};" VOL_ICON)
    (label :class "infotext" :halign "start" :text "${VOLUME}")))

;; battery
(defwidget battery []
  (box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
    (box :style "color: ${BAT_COL};" BAT_ICON)
    (label :class "infotext" :halign "start" :text "${EWW_BATTERY["BAT1"].capacity}")))

;; ** Sections **

(defwidget left []
  (box :orientation "h"
      :class "left"
      :space-evenly "true"
      :halign "start"
      :spacing 5
    (workspaces)))

(defwidget center []
  (box :orientation "h"
      :class "center"
      :space-evenly "false"
      :halign "start"
    (box :class "dockbox"
      (clock)
      (weather))))

(defwidget right []
  (button :onclick "${EWW} open --toggle system && ${EWW} open system-closer"
    (box :orientation "h"
        :class "right"
        :space-evenly "false"
        :halign "end"
      (box :class "dockbox"
        (box :orientation "h" :spacing 5 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
          (wifi)
          (sep)
          (volume)
          (sep)
          (battery))))))

;; ** Closer **

(defwidget closer [window]
  (eventbox :onclick "eww close ${window} && eww close ${window}-closer"))

(defwindow system-closer
  :monitor 0
  :focusable "false"
  :stacking "fg"
  :geometry (geometry :width "100%" :height "100%")
  (closer :window "system"))

(defwindow calbox-closer
  :monitor 0
  :focusable "false"
  :stacking "fg"
  :geometry (geometry :width "100%" :height "100%")
  (closer :window "calbox"))

;; ** Pop-ups **

(include "./modules/sys.yuck")
(include "./modules/cal.yuck")

;; ** Bar **

(defwidget bar []
  (centerbox :class "eww_bar"
      :orientation "h"
      :vexpand "false"
      :hexpand "false"
    (left)
    (center)
    (right)))

;; bar
(defwindow bar
    :monitor 0
    :wm-ignore "true"
    :windowtype "toolbar"
    :exclusive "true"
    :focusable "false"
    :stacking "fg"
    :geometry (geometry :x "0%"
        :y "0%"
        :width "100%"
        :height "0px"
        :anchor "top center")
  (bar))
