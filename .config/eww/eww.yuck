(defvar EWW "/usr/bin/eww -c $HOME/.config/eww")

;; CLOSER
(defwidget closer [window]
  (eventbox
    :onclick "eww close ${window} && eww close ${window}-closer"))

;; SPACER
(defwidget spacer []
  (label
    :class "spacer"
    :text "|"
  )
)

;; Settings
(defwidget settings []
  (button
    :onclick "${EWW} open --toggle sidebar && ${EWW} open sidebar-closer"
    (label
      :class "settings"
      :text "󰣇"
    )
  )
)

;; WORKSPACES
(deflisten workspaces :initial "[]" "bash scripts/workspaces")
(deflisten current_workspace :initial "1" "bash scripts/activworkspaces")

(defwidget workspaces []
  (box
    :space-evenly true
    (label
      :text "${workspaces}${current_workspace}"
      :visible false
    )
    (for workspace in workspaces
      (eventbox
        :onclick "hyprctl dispatch workspace ${workspace.id}"
        (box
          :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
          (label :text "")
        )
      )
    )
  )
)

;; Window Title
(deflisten win-title :initial "..." "sh scripts/activwin")

(defwidget win-title []
  (box
    :class "win-title"
    :spacing 0
    :orientation "v"
    (label
      :text win-title
      :limit-width 80
    )
  )
)

;; Weather
(defpoll wtr-temp :interval "5m" "$HOME/.config/scripts/weather.sh --temp")
(defpoll wtr-icon :interval "5m" "$HOME/.config/scripts/weather.sh --icon")
(defpoll wtr-col :interval "5m" "$HOME/.config/scripts/weather.sh --hex")
(defpoll wtr-feel :interval "5m" "$HOME/.config/scripts/weather.sh --feel")
(defpoll wtr-stat :interval "5m" "$HOME/.config/scripts/weather.sh --stat")

(defwidget weather []
  (box
    :class "weather"
    :tooltip "${wtr-stat} | Real Feel ${wtr-feel}F"
    :spacing 0
    :orientation "h"
    (label
      :class "wtr-icon"
      :halign "center"
      :style "color: ${wtr-col};"
      :text wtr-icon
    )
    (label
      :class "wtr-temp"
      :halign "center"
      :text "${wtr-temp}F"
    )
  )
)

;; Bluetooth
(defwidget bluetooth []
  (box
    :class "bluetooth"
    :spacing 0
    :orientation "h"
    (label
      :class "blu-icon"
      :halign "center"
      :text ""
    )
    (label
      :class "blu-dev"
      :halign "center"
      :text ""
    )
  )
)

;; Network
(defpoll net-icon :interval "30s" "scripts/wifi --ICON")
(defpoll net-essid :interval "30s" "scripts/wifi --ESSID")
(defpoll net-col :interval "30s" "scripts/wifi --COL")

(defwidget network []
  (eventbox
    :onclick "nm-connection-editor &"
    (box
      :class "network"
      :spacing 0
      :orientation "h"
      (label
        :class "net-icon"
        :halign "center"
        :style "color: ${net-col};"
        :text net-icon
        :tooltip net-essid
      )
    )
  )
)

;; Volume
(defpoll vol-icon :interval "1s" "scripts/volume --ICON")
(defpoll vol-perc :interval "1s" "scripts/volume --PERC")
(defpoll vol-col :interval "1s" "scripts/volume --COL")

(defwidget volume []
  (eventbox
    :onclick "pamixer -t"
    (box
      :class "volume"
      :spacing 0
      :orientation "h"
      (label
        :class "vol-icon"
        :halign "center"
        :style "color: ${vol-col};"
        :text vol-icon
        :tooltip "${vol-perc}󰏰"
      )
    )
  )
)

;; Battery
(defpoll bat-icon :interval "3s" "scripts/battery --ICON")
(defpoll bat-col :interval "3s" "scripts/battery --COL")

(defwidget battery []
  (box
    :class "battery"
    :spacing 0
    :orientation "h"
    (label
      :class "bat-icon"
      :halign "center"
      :style "color: ${bat-col};"
      :text bat-icon
      :tooltip "${EWW_BATTERY["BAT1"].capacity}󰏰" 
    )
  )
)

;; Clock
(defpoll TIME :interval "10s" "date +\"%I:%M %p\"")
(defpoll DATE :interval "1h" "date +\"%A, %d %B %Y\"")

(defwidget clock []
  (box
    :class "clockbox"
    :spacing 0
    :orientation "v"
    (label
      :class "time"
      :halign "center"
      :text TIME
      :tooltip DATE
    )
  )
)

;; Power button
(defvar powerbuttons false)

(defwidget powerbutton []
  (eventbox
    :onhover "${EWW} update powerbuttons=true"
    :onhoverlost "${EWW} update powerbuttons=false"
    (box
      :class "powerbuttons"
      :orientation "h"
      :space-evenly "false"
      (button
        :class "button-off"
        :tooltip "Shutdown"
        :onclick "systemctl poweroff"
        ""
      )
      (revealer
        :transition "slideleft"
        :reveal powerbuttons
        :duration "550ms"
        (box
          :orientation "h"
          :space-evenly "false"
          (button
            :class "button-reb"
            :tooltip "Restart"
            :onclick "systemctl reboot"
            "󰜉"
          )
          (button
            :class "button-hib"
            :tooltip "Hibernate"
            :onclick "${EWW} update powerbuttons=false && systemctl hibernate"
            "󰤁"
          )
        )
      )
    )
  )
)


;; Sections
(defwidget left []
  (box
    :class "left"
    :halign "start"
    :orientation "h"
    (box
      :class "dockbox"
      :orientation "h"
      :spacing 5
      :valign "center"
      :halign "center"
      :space-evenly "false"
      :vexpand "false"
      :hexpand "false"
      (powerbutton)
      (workspaces)
    )
  )
)

(defwidget center []
  (box
    :class "center"
    :halign "center"
    :orientation "h"
    (box
      :class "dockbox"
      :spacing 5
      :orientation "h"
      :space-evenly "false"
      :vexpand "false"
      :hexpand "false"
      (win-title)
    )
  )
)

(defwidget right []
  (box
    :class "right"
    :halign "end"
    :orientation "h"
    (box
      :class "dockbox"
      :spacing 5
      :orientation "h"
      :space-evenly "false"
      :vexpand "false"
      :hexpand "false"
      (weather)
      (spacer)
      (network)
      (volume)
      (battery)
      (spacer)
      (clock)
      (spacer)
      (settings)
    )
  )
)

;; Bar Setup
(defwidget bar []
  (centerbox
    :class "bar"
    :orientation "h"
    (left)
    (center)
    (right)
  )
)

;; BAR
(defwindow bar
  :monitor 0
  :wm-ignore "true"
  :windowtype "toolbar"
  :exclusive "true"
  :focusable "false"
  :stacking "fg"
  :geometry (geometry
    :x "0%"
    :y "0%"
    :width "100%"
    :height "0px"
    :anchor "bottom center")
  (bar)
)

;; MODULES
(include "./modules/sidebar.yuck")
